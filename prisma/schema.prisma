// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String    // Hashed password
  role       Role      @default(CUSTOMER) // Enum (customer/admin)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  cart       Cart?
  orders     Order[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       String    // Varchar for price
  stok        Int
  imgUrl      String
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart      @relation(fields: [cartId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  totalPrice Int
  status     OrderStatus @default(PENDING) // Enum (pending/complete/canceled)
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float     // Decimal for price
  order     Order     @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETE
  CANCELED
}
